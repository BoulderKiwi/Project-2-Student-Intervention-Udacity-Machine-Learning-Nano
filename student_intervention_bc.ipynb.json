{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Machine Learning Engineer Nanodegree\n",
    "## Supervised Learning\n",
    "## Project 2: Building a Student Intervention System"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Welcome to the second project of the Machine Learning Engineer Nanodegree! In this notebook, some template code has already been provided for you, and it will be your job to implement the additional functionality necessary to successfully complete this project. Sections that begin with **'Implementation'** in the header indicate that the following block of code will require additional functionality which you must provide. Instructions will be provided for each section and the specifics of the implementation are marked in the code block with a `'TODO'` statement. Please be sure to read the instructions carefully!\n",
    "\n",
    "In addition to implementing code, there will be questions that you must answer which relate to the project and your implementation. Each section where you will answer a question is preceded by a **'Question X'** header. Carefully read each question and provide thorough answers in the following text boxes that begin with **'Answer:'**. Your project submission will be evaluated based on your answers to each of the questions and the implementation you provide.  \n",
    "\n",
    ">**Note:** Code and Markdown cells can be executed using the **Shift + Enter** keyboard shortcut. In addition, Markdown cells can be edited by typically double-clicking the cell to enter edit mode."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 1 - Classification vs. Regression\n",
    "*Your goal for this project is to identify students who might need early intervention before they fail to graduate. Which type of supervised learning problem is this, classification or regression? Why?*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "**Answer: **\n",
    "Since the goal is to identify students who might need early intervention, our predictor variable is discrete—the “pass\" variable. By training data on students that passed or not, the model will be able to predict which students will pass or not pass, allowing administrators the ability to identify candidates for early intervention before they actually fail. Various classification algorithms will be trained with cross validation to compare the predictive accuracy of the classifiers. With the decision boundary identified, we can predict the class label for new data. Furthermore, regression would not be appropriate for this problem because the response variable is continuous, and will is not suitable for classifying students by the discrete class variable “pass.” \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploring the Data\n",
    "Run the code cell below to load necessary Python libraries and load the student data. Note that the last column from this dataset, `'passed'`, will be our target label (whether the student graduated or didn't graduate). All other columns are features about each student."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Student data read successfully!\n"
     ]
    }
   ],
   "source": [
    "# Import libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from time import time\n",
    "from sklearn.metrics import f1_score\n",
    "\n",
    "# Read student data\n",
    "student_data = pd.read_csv(\"student-data.csv\")\n",
    "print \"Student data read successfully!\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementation: Data Exploration\n",
    "Let's begin by investigating the dataset to determine how many students we have information on, and learn about the graduation rate among these students. In the code cell below, you will need to compute the following:\n",
    "- The total number of students, `n_students`.\n",
    "- The total number of features for each student, `n_features`.\n",
    "- The number of those students who passed, `n_passed`.\n",
    "- The number of those students who failed, `n_failed`.\n",
    "- The graduation rate of the class, `grad_rate`, in percent (%).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of students: 395\n",
      "Number of features: 30\n",
      "Number of students who passed: 265\n",
      "Number of students who failed: 130\n",
      "Graduation rate of the class: 67.09%\n"
     ]
    }
   ],
   "source": [
    "# TODO: Calculate number of students\n",
    "\n",
    "n_students = len(student_data.index)\n",
    "\n",
    "# TODO: Calculate number of features\n",
    "\n",
    "n_features = len(student_data.columns)-1\n",
    "\n",
    "# TODO: Calculate passing students\n",
    "n_passed = len(student_data[(student_data[\"passed\"]==\"yes\")])\n",
    "# student_data['passed'].value_counts()\n",
    "\n",
    "# TODO: Calculate failing students\n",
    "n_failed = len(student_data[(student_data[\"passed\"]==\"no\")])\n",
    "\n",
    "# TODO: Calculate graduation rate\n",
    "grad_rate = float (n_passed) / (n_students)*100\n",
    "\n",
    "# Print the results\n",
    "print \"Total number of students: {}\".format(n_students)\n",
    "print \"Number of features: {}\".format(n_features)\n",
    "print \"Number of students who passed: {}\".format(n_passed)\n",
    "print \"Number of students who failed: {}\".format(n_failed)\n",
    "print \"Graduation rate of the class: {:.2f}%\".format(grad_rate)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preparing the Data\n",
    "In this section, we will prepare the data for modeling, training and testing.\n",
    "\n",
    "### Identify feature and target columns\n",
    "It is often the case that the data you obtain contains non-numeric features. This can be a problem, as most machine learning algorithms expect numeric data to perform computations with.\n",
    "\n",
    "Run the code cell below to separate the student data into feature and target columns to see if any features are non-numeric."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature columns:\n",
      "['school', 'sex', 'age', 'address', 'famsize', 'Pstatus', 'Medu', 'Fedu', 'Mjob', 'Fjob', 'reason', 'guardian', 'traveltime', 'studytime', 'failures', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic', 'famrel', 'freetime', 'goout', 'Dalc', 'Walc', 'health', 'absences']\n",
      "\n",
      "Target column: passed\n",
      "\n",
      "Feature values:\n",
      "  school sex  age address famsize Pstatus  Medu  Fedu     Mjob      Fjob  \\\n",
      "0     GP   F   18       U     GT3       A     4     4  at_home   teacher   \n",
      "1     GP   F   17       U     GT3       T     1     1  at_home     other   \n",
      "2     GP   F   15       U     LE3       T     1     1  at_home     other   \n",
      "3     GP   F   15       U     GT3       T     4     2   health  services   \n",
      "4     GP   F   16       U     GT3       T     3     3    other     other   \n",
      "\n",
      "   ...   internet romantic  famrel  freetime  goout Dalc Walc health absences  \\\n",
      "0  ...         no       no       4         3      4    1    1      3        6   \n",
      "1  ...        yes       no       5         3      3    1    1      3        4   \n",
      "2  ...        yes       no       4         3      2    2    3      3       10   \n",
      "3  ...        yes      yes       3         2      2    1    1      5        2   \n",
      "4  ...         no       no       4         3      2    1    2      5        4   \n",
      "\n",
      "  passed  \n",
      "0     no  \n",
      "1     no  \n",
      "2    yes  \n",
      "3    yes  \n",
      "4    yes  \n",
      "\n",
      "[5 rows x 31 columns]\n"
     ]
    }
   ],
   "source": [
    "# Extract feature columns\n",
    "feature_cols = list(student_data.columns[:-1])\n",
    "\n",
    "# Extract target column 'passed'\n",
    "target_col = student_data.columns[-1] \n",
    "\n",
    "# Show the list of columns\n",
    "print \"Feature columns:\\n{}\".format(feature_cols)\n",
    "print \"\\nTarget column: {}\".format(target_col)\n",
    "\n",
    "# Separate the data into feature data and target data (X_all and y_all, respectively)\n",
    "X_all = student_data[feature_cols]\n",
    "y_all = student_data[target_col]\n",
    "\n",
    "# Show the feature information by printing the first five rows\n",
    "print \"\\nFeature values:\\n\", student_data.head(n=5)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Preprocess Feature Columns\n",
    "\n",
    "As you can see, there are several non-numeric columns that need to be converted! Many of them are simply `yes`/`no`, e.g. `internet`. These can be reasonably converted into `1`/`0` (binary) values.\n",
    "\n",
    "Other columns, like `Mjob` and `Fjob`, have more than two values, and are known as _categorical variables_. The recommended way to handle such a column is to create as many columns as possible values (e.g. `Fjob_teacher`, `Fjob_other`, `Fjob_services`, etc.), and assign a `1` to one of them and `0` to all others.\n",
    "\n",
    "These generated columns are sometimes called _dummy variables_, and we will use the [`pandas.get_dummies()`](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.get_dummies.html?highlight=get_dummies#pandas.get_dummies) function to perform this transformation. Run the code cell below to perform the preprocessing routine discussed in this section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed feature columns (48 total features):\n",
      "['school_GP', 'school_MS', 'sex_F', 'sex_M', 'age', 'address_R', 'address_U', 'famsize_GT3', 'famsize_LE3', 'Pstatus_A', 'Pstatus_T', 'Medu', 'Fedu', 'Mjob_at_home', 'Mjob_health', 'Mjob_other', 'Mjob_services', 'Mjob_teacher', 'Fjob_at_home', 'Fjob_health', 'Fjob_other', 'Fjob_services', 'Fjob_teacher', 'reason_course', 'reason_home', 'reason_other', 'reason_reputation', 'guardian_father', 'guardian_mother', 'guardian_other', 'traveltime', 'studytime', 'failures', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic', 'famrel', 'freetime', 'goout', 'Dalc', 'Walc', 'health', 'absences']\n"
     ]
    }
   ],
   "source": [
    "def preprocess_features(X):\n",
    "    ''' Preprocesses the student data and converts non-numeric binary variables into\n",
    "        binary (0/1) variables. Converts categorical variables into dummy variables. '''\n",
    "    \n",
    "    # Initialize new output DataFrame\n",
    "    output = pd.DataFrame(index = X.index)\n",
    "\n",
    "    # Investigate each feature column for the data\n",
    "    for col, col_data in X.iteritems():\n",
    "        \n",
    "        # If data type is non-numeric, replace all yes/no values with 1/0\n",
    "        if col_data.dtype == object:\n",
    "            col_data = col_data.replace(['yes', 'no'], [1, 0])\n",
    "\n",
    "        # If data type is categorical, convert to dummy variables\n",
    "        if col_data.dtype == object:\n",
    "            # Example: 'school' => 'school_GP' and 'school_MS'\n",
    "            col_data = pd.get_dummies(col_data, prefix = col)  \n",
    "        \n",
    "        # Collect the revised columns\n",
    "        output = output.join(col_data)\n",
    "    \n",
    "    return output\n",
    "\n",
    "X_all = preprocess_features(X_all)\n",
    "print \"Processed feature columns ({} total features):\\n{}\".format(len(X_all.columns), list(X_all.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementation: Training and Testing Data Split\n",
    "So far, we have converted all _categorical_ features into numeric values. For the next step, we split the data (both features and corresponding labels) into training and test sets. In the following code cell below, you will need to implement the following:\n",
    "- Randomly shuffle and split the data (`X_all`, `y_all`) into training and testing subsets.\n",
    "  - Use 300 training points (approximately 75%) and 95 testing points (approximately 25%).\n",
    "  - Set a `random_state` for the function(s) you use, if provided.\n",
    "  - Store the results in `X_train`, `X_test`, `y_train`, and `y_test`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set has 300 samples.\n",
      "Testing set has 95 samples.\n"
     ]
    }
   ],
   "source": [
    "# TODO: Import any additional functionality you may need here\n",
    "from sklearn.cross_validation import train_test_split\n",
    "\n",
    "\n",
    "# TODO: Shuffle and split the dataset into the number of training and testing points above\n",
    "\n",
    "#   Since we are dealing with an unbalanced label class, I am using stratification to preserve \n",
    "#   the percentage of samples in each class. \n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_all, \n",
    "                                                    y_all,stratify=y_all, \n",
    "                                                    test_size = 95, \n",
    "                                                    random_state = 42)\n",
    "\n",
    "# Show the results of the split\n",
    "print \"Training set has {} samples.\".format(X_train.shape[0])\n",
    "print \"Testing set has {} samples.\".format(X_test.shape[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training and Evaluating Models\n",
    "In this section, you will choose 3 supervised learning models that are appropriate for this problem and available in `scikit-learn`. You will first discuss the reasoning behind choosing these three models by considering what you know about the data and each model's strengths and weaknesses. You will then fit the model to varying sizes of training data (100 data points, 200 data points, and 300 data points) and measure the F<sub>1</sub> score. You will need to produce three tables (one for each model) that shows the training set size, training time, prediction time, F<sub>1</sub> score on the training set, and F<sub>1</sub> score on the testing set.\n",
    "\n",
    "**The following supervised learning models are currently available in** [`scikit-learn`](http://scikit-learn.org/stable/supervised_learning.html) **that you may choose from:**\n",
    "- Gaussian Naive Bayes (GaussianNB)\n",
    "- Decision Trees\n",
    "- Ensemble Methods (Bagging, AdaBoost, Random Forest, Gradient Boosting)\n",
    "- K-Nearest Neighbors (KNeighbors)\n",
    "- Stochastic Gradient Descent (SGDC)\n",
    "- Support Vector Machines (SVM)\n",
    "- Logistic Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2 - Model Application\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*List three supervised learning models that are appropriate for this problem. For each model chosen*\n",
    "- Describe one real-world application in industry where the model can be applied. *(You may need to do a small bit of research for this — give references!)* \n",
    "- What are the strengths of the model; when does it perform well? \n",
    "- What are the weaknesses of the model; when does it perform poorly?\n",
    "- What makes this model a good candidate for the problem, given what you know about the data?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer: **\n",
    "\n",
    "In an Efficient Multi-Relational Naïve Bayesian Classifier based on Semantic Relationship Graph, Liu argues that multi-relational Naïve Bayesian classifiers work well at predicting a borrower’s ability to repay loans. Peer-to-Peer (P2P) lending platforms predict borrower’s default risk by merging social network data with traditional credit data; however, when social network data is merged from several sources into one data table, the single data table suffers from high redundancy. Bayesian classification methods can handle high redundancy, which is why Naïve Bayes classifiers are used in the P2P lending industry. \n",
    "\n",
    "The Naïve Bayes classifier has several strengths: it is easy to implement, well known and understood, and empirically successful. If independence of attributes holds, NB classifier will converge quicker than discriminative models thus requiring less training data. Naïve Bayes biggest disadvantage is its simplicity. At times, model complexity is advantageous when generalizing the relationship of from complex relationships and interactions. Furthermore, the assumption of independence among attributes may not be realistic and models that do not force this assumption on the class structure can better perform when there is high dependence among attributes. According to Haste, even if the individual class density estimates are biased, the posterior probabilities near the decision boundary can withstand considerable bias—the posterior probabilities can be smooth even when the population class densities are not (pg. 210-211).\n",
    "\n",
    "Naïve Bayes was a good candidate because it the data set was small, thus a more complex classifier may over fit compared to Naïve Bayes. According to a Michael, a Udacity lecturer, Naïve Bayes is often a good first model to run because it provides a reasonable baseline to compare other models against. \n",
    "\n",
    "According to Bergstra, AdaBoost methods have been proven adept within the music streaming industry to classify digital music.  Given a set of audio features that have been extracted from segments of songs, the AdaBoost classifier can be trained to predict both the musical genre and artist. Interestingly, the authors provide evidence that AdaBoost classification works better if the classifier is trained on only segments of audio, not entire songs or individual sort-timescale features. By accurately classifying a listener’s taste in music, digital streaming services can provide more accurate suggestions (Apple’s Genius) to customers seeking new artists. \n",
    "\n",
    "The AdaBoost classifier has several strengths: it is computationally efficient, the parameters are easy to set, and crucially, a wide array of weak learners may be used including, the AdaBoost, Bernoulli NB, DecisionTree, Multinomial N.B., NuSVC, Perceptron, Random Forest, Ridge Classifier and Support Vector Machines. The AdaBoost classifier has several weaknesses: it is susceptible to uniform noise, the base learners should be weak learners in order to avoid overfitting and a sufficient amount of data is necessary utilize weak learner’s ability to make use of marginal improvements that in aggregate provide complexity. \n",
    "\n",
    "AdaBoost classifier was a good candidate because Boosting can create complex classifiers through weak learners—thus allowing AdaBoost to iteratively focus on the data points that are more difficult to classify.  \n",
    "\n",
    "According to Kaiyi, the Support Vector Machines (SVM) classifier has been used in New Zealand to automate the hazard analysis and critical control points (HACCP) to improve food safety. To implement the first and second principles of the HACCP, the SVM classifies hazards into critical control points (CCPs) and non-CCPs. SVM have shown considerable advantages in this complex structured task of food safety. \n",
    "\n",
    "The SVM classifier has multiple strengths: it is effective in high dimensional spaces and in cases where the number of dimension is greater than the number of samples, it is memory efficient because it concentrates on a subset of training points near the decision boundary (support vectors) rather than all the data points. The SVM classifier has several disadvantages: given a large data set, the SVM performs requires a longer training time, noisy data (overlapping target classes) can cause SVM to perform worse than Naïve Bayes classifiers and given a lot of features, it will perform slowly and tend to over fit the data. \n",
    "\n",
    "The SVM classifier was a good candidate because SVM do well with complicated domains with marginal separations at the decision boundary—since we are trying to maximize the margin with SVMs.  Additionally, since the data was not very large or feature rich, SVM classifier was a good candidate. \n",
    " \n",
    "\n",
    "References:\n",
    "\n",
    "H. Liu, X. Yin and J. Han, \"An Efficient Multirelational Naive Bayesian Classifier Based on Semantic Relationship Graph\", ACM MRDM, 2005.\n",
    "\n",
    "Wang Kaiyi, Zhao Chunjiang, Zhang Fang Tian, Wang Xiao Juan, Chen Hong, and Yao Yuan Fang, New Zealand Journal Of Agricultural Research Vol. 50 , Iss. 5,2007\n",
    "\n",
    "Bergstra, J., Casagrande, N., Erhan, D. et al. Mach Learn (2006) 65: 473. doi:10.1007/s10994-006-9019-7\n",
    "\n",
    "Ray, Sunil. Understanding Support Vector machine algorithm form examples (along with code). Analytics Vidya. N.p. 6 Oct. 2015. Web. 25 Sept. 2016. \n",
    "\n",
    "Hastie, Trevor, Trevor Hastie, Robert Tibshirani, and J H. Friedman. The Elements of Statistical Learning: Data Mining, Inference, and Prediction. New York: Springer, 2001. Print.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setup\n",
    "Run the code cell below to initialize three helper functions which you can use for training and testing the three supervised learning models you've chosen above. The functions are as follows:\n",
    "- `train_classifier` - takes as input a classifier and training data and fits the classifier to the data.\n",
    "- `predict_labels` - takes as input a fit classifier, features, and a target labeling and makes predictions using the F<sub>1</sub> score.\n",
    "- `train_predict` - takes as input a classifier, and the training and testing data, and performs `train_clasifier` and `predict_labels`.\n",
    " - This function will report the F<sub>1</sub> score for both the training and testing data separately."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def train_classifier(clf, X_train, y_train):\n",
    "    ''' Fits a classifier to the training data. '''\n",
    "    \n",
    "    # Start the clock, train the classifier, then stop the clock\n",
    "    start = time()\n",
    "    clf.fit(X_train, y_train)\n",
    "    end = time()\n",
    "    \n",
    "    # Print the results\n",
    "    print \"Trained model in {:.4f} seconds\".format(end - start)\n",
    "    \n",
    "    \n",
    "def predict_labels(clf, features, target):\n",
    "    ''' Makes predictions using a fit classifier based on F1 score. '''\n",
    "    \n",
    "    # Start the clock, make predictions, then stop the clock\n",
    "    start = time()\n",
    "    y_pred = clf.predict(features)\n",
    "    end = time()\n",
    "    \n",
    "    # Print and return results\n",
    "    print \"Made predictions in {:.4f} seconds.\".format(end - start)\n",
    "    return f1_score(target.values, y_pred, pos_label='yes')\n",
    "\n",
    "\n",
    "def train_predict(clf, X_train, y_train, X_test, y_test):\n",
    "    ''' Train and predict using a classifer based on F1 score. '''\n",
    "    \n",
    "    # Indicate the classifier and the training set size\n",
    "    print \"Training a {} using a training set size of {}. . .\".format(clf.__class__.__name__, len(X_train))\n",
    "    \n",
    "    # Train the classifier\n",
    "    train_classifier(clf, X_train, y_train)\n",
    "    \n",
    "    # Print the results of prediction for both training and testing\n",
    "    print \"F1 score for training set: {:.4f}.\".format(predict_labels(clf, X_train, y_train))\n",
    "    print \"F1 score for test set: {:.4f}.\".format(predict_labels(clf, X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementation: Model Performance Metrics\n",
    "With the predefined functions above, you will now import the three supervised learning models of your choice and run the `train_predict` function for each one. Remember that you will need to train and predict on each classifier for three different training set sizes: 100, 200, and 300. Hence, you should expect to have 9 different outputs below — 3 for each model using the varying training set sizes. In the following code cell, you will need to implement the following:\n",
    "- Import the three supervised learning models you've discussed in the previous section.\n",
    "- Initialize the three models and store them in `clf_A`, `clf_B`, and `clf_C`.\n",
    " - Use a `random_state` for each model you use, if provided.\n",
    " - **Note:** Use the default settings for each model — you will tune one specific model in a later section.\n",
    "- Create the different training set sizes to be used to train each model.\n",
    " - *Do not reshuffle and resplit the data! The new training points should be drawn from `X_train` and `y_train`.*\n",
    "- Fit each model with each training set size and make predictions on the test set (9 in total).  \n",
    "**Note:** Three tables are provided after the following code cell which can be used to store your results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training a GaussianNB using a training set size of 100. . .\n",
      "Trained model in 0.0030 seconds\n",
      "Made predictions in 0.0006 seconds.\n",
      "F1 score for training set: 0.7752.\n",
      "Made predictions in 0.0005 seconds.\n",
      "F1 score for test set: 0.6457.\n",
      "Training a GaussianNB using a training set size of 200. . .\n",
      "Trained model in 0.0018 seconds\n",
      "Made predictions in 0.0006 seconds.\n",
      "F1 score for training set: 0.8060.\n",
      "Made predictions in 0.0007 seconds.\n",
      "F1 score for test set: 0.7218.\n",
      "Training a GaussianNB using a training set size of 300. . .\n",
      "Trained model in 0.0024 seconds\n",
      "Made predictions in 0.0009 seconds.\n",
      "F1 score for training set: 0.8134.\n",
      "Made predictions in 0.0004 seconds.\n",
      "F1 score for test set: 0.7761.\n",
      "Training a AdaBoostClassifier using a training set size of 100. . .\n",
      "Trained model in 0.1469 seconds\n",
      "Made predictions in 0.0085 seconds.\n",
      "F1 score for training set: 0.9778.\n",
      "Made predictions in 0.0079 seconds.\n",
      "F1 score for test set: 0.6880.\n",
      "Training a AdaBoostClassifier using a training set size of 200. . .\n",
      "Trained model in 0.1607 seconds\n",
      "Made predictions in 0.0089 seconds.\n",
      "F1 score for training set: 0.8905.\n",
      "Made predictions in 0.0069 seconds.\n",
      "F1 score for test set: 0.7445.\n",
      "Training a AdaBoostClassifier using a training set size of 300. . .\n",
      "Trained model in 0.1561 seconds\n",
      "Made predictions in 0.0089 seconds.\n",
      "F1 score for training set: 0.8565.\n",
      "Made predictions in 0.0062 seconds.\n",
      "F1 score for test set: 0.7328.\n",
      "Training a SVC using a training set size of 100. . .\n",
      "Trained model in 0.0013 seconds\n",
      "Made predictions in 0.0008 seconds.\n",
      "F1 score for training set: 0.8354.\n",
      "Made predictions in 0.0008 seconds.\n",
      "F1 score for test set: 0.8025.\n",
      "Training a SVC using a training set size of 200. . .\n",
      "Trained model in 0.0035 seconds\n",
      "Made predictions in 0.0024 seconds.\n",
      "F1 score for training set: 0.8431.\n",
      "Made predictions in 0.0026 seconds.\n",
      "F1 score for test set: 0.8105.\n",
      "Training a SVC using a training set size of 300. . .\n",
      "Trained model in 0.0081 seconds\n",
      "Made predictions in 0.0051 seconds.\n",
      "F1 score for training set: 0.8664.\n",
      "Made predictions in 0.0019 seconds.\n",
      "F1 score for test set: 0.8052.\n"
     ]
    }
   ],
   "source": [
    "# TODO: Import the three supervised learning models from sklearn\n",
    "\n",
    "# from sklearn import model_A\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "\n",
    "# from sklearn import model_B\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "\n",
    "# from skearln import model_C\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "# TODO: Initialize the three models\n",
    "classifiers = [\n",
    "    GaussianNB(),\n",
    "    AdaBoostClassifier(random_state=43),\n",
    "    SVC(random_state=43),]\n",
    "\n",
    "# TODO: Set up the training set sizes\n",
    "\n",
    "X_train_100 = X_train.iloc[:100]\n",
    "y_train_100 = y_train.iloc[:100]\n",
    "\n",
    "X_train_200 = X_train.iloc[:200]\n",
    "y_train_200 = y_train.iloc[:200]\n",
    "\n",
    "X_train_300 = X_train.iloc[:300]\n",
    "y_train_300 = y_train.iloc[:300]\n",
    "\n",
    "\n",
    "datasets = [X_train_100, y_train_100, X_train_200, y_train_200,\n",
    "           X_train_300, y_train_300]\n",
    "\n",
    "#iterate over data sets\n",
    "\n",
    "# TODO: Execute the 'train_predict' function for each classifier and each training set size\n",
    "# train_predict(clf, X_train, y_train, X_test, y_test)\n",
    "\n",
    "for clf in classifiers: \n",
    "    train_predict(clf,X_train_100, y_train_100, X_test, y_test)\n",
    "    train_predict(clf,X_train_200, y_train_200, X_test, y_test)\n",
    "    train_predict(clf,X_train_300, y_train_300, X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tabular Results\n",
    "Edit the cell below to see how a table can be designed in [Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#tables). You can record your results from above in the tables provided."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Classifer 1 - GaussianNB**  \n",
    "\n",
    "| Training Set Size | Training Time | Prediction Time (test) | F1 Score (train) | F1 Score (test) |\n",
    "| :---------------: | :---------------------: | :--------------------: | :--------------: | :-------------: |\n",
    "| 100               |            .0023             |   0.0004                     |      0.7752            |     0.6457            |\n",
    "| 200               |        0.0018          |          0.0005              |         0.8060         |    0.7218             |\n",
    "| 300               |            0.0013          |      0.0006                  |      0.8134            |    0.7761      |\n",
    "\n",
    "** Classifer 2 - AdaBoost **  \n",
    "\n",
    "| Training Set Size | Training Time | Prediction Time (test) | F1 Score (train) | F1 Score (test) |\n",
    "| :---------------: | :---------------------: | :--------------------: | :--------------: | :-------------: |\n",
    "| 100               |            0.1771             |       0.0086             |      0.9778            |        0.6880         |\n",
    "| 200               |     0.1954  |           0.0073    |  0.8905     |         0.7445        |\n",
    "| 300               |     0.1960                    |    0.0099                    |   0.8565               |     0.7328     |\n",
    "\n",
    "** Classifer 3 - SVM **  \n",
    "\n",
    "| Training Set Size | Training Time | Prediction Time (test) | F1 Score (train) | F1 Score (test) |\n",
    "| :---------------: | :---------------------: | :--------------------: | :--------------: | :-------------: |\n",
    "| 100               |      0.0064                   |    0.0008                    |        0.8354          |       0.8025         |\n",
    "| 200               |  0.0047            |       0.0016        | 0.8431   |      0.8105     |\n",
    "| 300               |   0.0080          |      0.0021                  |         0.8664         |     0.8052            |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Choosing the Best Model\n",
    "In this final section, you will choose from the three supervised learning models the *best* model to use on the student data. You will then perform a grid search optimization for the model over the entire training set (`X_train` and `y_train`) by tuning at least one parameter to improve upon the untuned model's F<sub>1</sub> score. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3 - Choosing the Best Model\n",
    "*Based on the experiments you performed earlier, in one to two paragraphs, explain to the board of supervisors what single model you chose as the best model. Which model is generally the most appropriate based on the available data, limited resources, cost, and performance?*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer: **\n",
    "\n",
    "After testing several models to accurately predict whether a student will pass or fail, the Support Vector Machine was chosen based primarily on the available data, performance, and resources required. The size of the data available was quite small—only 395 data points.  SVMs are known to perform well on small data sets. The SVM classifier had the best F1 score, a weighted average of the precision and recall tested, when trained on 100, 200 and 300 data points. Therefore, the SVM is better at predicting which students will pass or fail, a key requirement for this experiment. \n",
    "\n",
    "The resource required (time) to train the model was much lower for the SVM than the AdaBoost classifier—giving SVM an advantage over the AdaBoost classifier. Although the Gaussian NB classifier required even less time than the SCM classifier, it fell short in terms of F1 score. This is encouraging because the large F1 score does not cost us much more time than the GaussianNB classifier and is much less than AdaBooost.  According to Tsang, the standard SVM big O for training time is O(n^3.)  Therefore, if we wanted to train and test the model on hundreds of thousands or millions of student data points, we would want to use “approximate optimal solutions” rather than the optimal solution.  If we wanted to use the model to train on very large datasets, then using a Naïve Bayes classifier may be preferred because it scales much better with a big O notation of only O(n).\n",
    "\n",
    "Resources: \n",
    "Tsang, Ivor, James Kwok, Pak-Ming Cheung. “Core Vector Machines: Fast SVM Training on Very Large Data Sets.” Journal of Machine Learning Research 6 (2005): 363-392. Print\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 4 - Model in Layman's Terms\n",
    "*In one to two paragraphs, explain to the board of directors in layman's terms how the final model chosen is supposed to work. Be sure that you are describing the major qualities of the model, such as how the model is trained and how the model makes a prediction. Avoid using advanced mathematical or technical jargon, such as describing equations or discussing the algorithm implementation.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer: **\n",
    "\n",
    "To explain the SVM, I will ask the Board to consider the data we already have on students.  The “pass” variable is what we would like to predict (output variable = response), while all the other variables are used to make those predictions (input variables = features.) We devise a way to place students on the basketball court so that students with the most similar features are grouped closest to one another. Then, based on the response variable, we give students who passed a green shirt and those that failed a red shirt. Our goal is take a rope and pass it between students on the basketball court to separate them by shirt color.  Our goal is to place the rope in a way to maximize the distance between the rope and students closest to the rope.  The students closest to the rope are called support vectors and to improve efficiency we realize that we simply need to concentrate our attention on maximizing the distance between the support vectors and the rope—called the margin width. Since the support vectors are the most difficult to classify and have a direct bearing on the optimum location of the rope, the other students can be ignored for now. See Diagram I.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<img src=\"https://udacity-github-sync-content.s3.amazonaws.com/_imgs/372/1474887071/SVM_2.png\"/>"
      ],
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import Image\n",
    "from IPython.core.display import HTML \n",
    "Image(url=\"https://udacity-github-sync-content.s3.amazonaws.com/_imgs/372/1474887071/SVM_2.png\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "During our training phase, we will implement cross-validation, which is a fancy way to avoid overfitting by holding back some students (testing set) that will be used to evaluate how well the model classifies students (training set). We will randomly subset the students into 10 smaller groups and allow each group to be the testing set for the 9 other groups in order to aggregate the 9 different ropes that are made to avoid overfitting. \n",
    "\n",
    "Now that we have trained our model using cross validation, we leave the rope where it is in order to classify new students. If the original data of students is representative of the population, the rope will allow us to place new students on the basketball court based on the same features and determine where they are in relationship to the rope. Once we look at where the students are standing, we can predict who will pass or fail based on what side of the rope they are on. \n",
    "\n",
    "The SVM works much the same way, implementing a clever mathematical construct called the kernel-trick to allow the rope to “curve” between students. To make the computations less burdensome, rather than actually bending the rope when the data is not linearly separable, we can project the data from N-dimensions into (N+1)-dimensions then separate the data with a linear-surface (hyperplane). \n",
    "\n",
    "\n",
    "In Diagram II, we can see that the figure on the left is not linearly separable, but if we “project” the same data points into three dimensions using the kernal-trick, we notice that the diagram on the right is now linearly separable with a hyperplane (flat surface). Finally, we can transform back back to two dimensions and the linear-hyperplane transforms into a non-linear circle. The kernel trick allowed us to \"bend the rope\" without the need for burdensome calculations. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<img src=\"http://www.eric-kim.net/eric-kim-net/posts/1/imgs/data_2d_to_3d.png\"/>"
      ],
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Image(url=\"http://www.eric-kim.net/eric-kim-net/posts/1/imgs/data_2d_to_3d.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<img src=\"https://udacity-github-sync-content.s3.amazonaws.com/_imgs/372/1474887078/data_2d_to_3d_hyperplane.png\"/>"
      ],
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Image(url= \"https://udacity-github-sync-content.s3.amazonaws.com/_imgs/372/1474887078/data_2d_to_3d_hyperplane.png\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementation: Model Tuning\n",
    "Fine tune the chosen model. Use grid search (`GridSearchCV`) with at least one important parameter tuned with at least 3 different values. You will need to use the entire training set for this. In the code cell below, you will need to implement the following:\n",
    "- Import [`sklearn.grid_search.gridSearchCV`](http://scikit-learn.org/stable/modules/generated/sklearn.grid_search.GridSearchCV.html) and [`sklearn.metrics.make_scorer`](http://scikit-learn.org/stable/modules/generated/sklearn.metrics.make_scorer.html).\n",
    "- Create a dictionary of parameters you wish to tune for the chosen model.\n",
    " - Example: `parameters = {'parameter' : [list of values]}`.\n",
    "- Initialize the classifier you've chosen and store it in `clf`.\n",
    "- Create the F<sub>1</sub> scoring function using `make_scorer` and store it in `f1_scorer`.\n",
    " - Set the `pos_label` parameter to the correct value!\n",
    "- Perform grid search on the classifier `clf` using `f1_scorer` as the scoring method, and store it in `grid_obj`.\n",
    "- Fit the grid search object to the training data (`X_train`, `y_train`), and store it in `grid_obj`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVC(C=200, cache_size=200, class_weight=None, coef0=0.0,\n",
      "  decision_function_shape='ovo', degree=3, gamma=0.0001, kernel='sigmoid',\n",
      "  max_iter=-1, probability=False, random_state=43, shrinking=True,\n",
      "  tol=0.001, verbose=False)\n",
      "Made predictions in 0.0047 seconds.\n",
      "Tuned model has a training F1 score of 0.8319.\n",
      "Made predictions in 0.0015 seconds.\n",
      "Tuned model has a testing F1 score of 0.7947.\n"
     ]
    }
   ],
   "source": [
    "# TODO: Import 'GridSearchCV' and 'make_scorer'\n",
    "from sklearn.metrics import make_scorer\n",
    "from sklearn.grid_search import GridSearchCV\n",
    "from sklearn.cross_validation import StratifiedShuffleSplit\n",
    "\n",
    "# Build a stratified shuffle object\n",
    "cv_sets = StratifiedShuffleSplit(y_train, n_iter = 10, test_size = .20, \n",
    "                      random_state = 43)\n",
    "\n",
    "# TODO: Create the parameters list you wish to tune\n",
    "parameters = {'C': [1.0, 10, 100, 150, 175, 200], \n",
    "              'gamma': [0.00015, 0.0001, 0.001, 0.1,1, 'auto'], \n",
    "             'kernel': ['poly', 'sigmoid', 'rbf'],\n",
    "             'decision_function_shape': ['ovo', 'ovr']}\n",
    "\n",
    "# TODO: Initialize the classifier\n",
    "clf = SVC(random_state=43)\n",
    "\n",
    "# TODO: Make an f1 scoring function using 'make_scorer' \n",
    "def score_func(y_true, y_pred):\n",
    "    # calculate the f1 score given the predicted and expected labels\n",
    "    return f1_score(y_true,y_pred, pos_label='yes')\n",
    "\n",
    "f1_scorer = make_scorer(score_func)\n",
    "\n",
    "# TODO: Perform grid search on the classifier using the f1_scorer as the scoring method\n",
    "grid_obj = GridSearchCV(estimator=clf, param_grid = parameters, scoring = f1_scorer, cv = cv_sets)\n",
    "\n",
    "# TODO: Fit the grid search object to the training data and find the optimal parameters\n",
    "grid_obj = grid_obj.fit(X_train, y_train)\n",
    "\n",
    "# Get the estimator\n",
    "clf.best = grid_obj.best_estimator_\n",
    "print clf.best\n",
    "# Report the final F1 score for training and testing after parameter tuning\n",
    "print \"Tuned model has a training F1 score of {:.4f}.\".format(predict_labels(clf.best, X_train, y_train))\n",
    "print \"Tuned model has a testing F1 score of {:.4f}.\".format(predict_labels(clf.best, X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 5 - Final F<sub>1</sub> Score\n",
    "*What is the final model's F<sub>1</sub> score for training and testing? How does that score compare to the untuned model?*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer: **\n",
    "The tuned model’s training F1 score is 0.8319 compared to the untuned model’s 0.8664.\n",
    "The tuned model’s test F1 score is 0.7947 compared to the untuned model’s 0.8052. The tuned model performed approximately as well as the untuned model. The tuned model appears to avoid some overfitting as the tuned model’s training and testing F1 score converge closer than the untuned model. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> **Note**: Once you have completed all of the code implementations and successfully answered each question above, you may finalize your work by exporting the iPython Notebook as an HTML document. You can do this by using the menu above and navigating to  \n",
    "**File -> Download as -> HTML (.html)**. Include the finished document along with this notebook as your submission."
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [Root]",
   "language": "python",
   "name": "Python [Root]"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
